1. What is Jenkins?

Jenkins is an open-source automation server used to implement 
Continuous Integration and Continuous Delivery (CI/CD). 
It automates tasks like building, testing, and deploying 
code, and integrates with tools like Git, Maven, Docker, and more.


2. How do you create a Jenkins job?
We create a job by:
    Clicking “New Item” in Jenkins.
    Entering a job name.
    Choosing a job type (e.g., Freestyle Project or Pipeline).
    Configuring the source code repository, build steps, and post-build actions.
    Saving and triggering the job manually or automatically via webhooks or polling.

3. What is Maven used for?
Maven is a build automation tool primarily for Java projects.
 It:
    Compiles source code.
    Runs tests.
    Packages applications (e.g., into .jar or .war files).
    Manages project dependencies using pom.xml.

4. How does Jenkins use build tools like Maven?

Jenkins uses Maven in build steps to automate compiling 
and packaging code. For example, in a freestyle job, you can:
    mvn clean package

Or configure Maven via Global Tool Configuration, then select 
it in the job settings. Jenkins then uses Maven to perform 
tasks like building, testing, and packaging your project.

5. What is the difference between compile and package in Maven?
mvn compile: Compiles the source code (Java files → .class files).
mvn package: Compiles the code and packages it into a distributable format like a .jar or .war.

So, package includes everything compile does, plus creates the 
final artifact.

6. Where do you configure tools in Jenkins?
Tools like JDK, Maven, Git, and Gradle are configured in:
Jenkins → Manage Jenkins → Global Tool Configuration

We can:
    Define installations (with automatic downloads or local paths).
    Reference them in jobs by name.

7. How do you debug a failed Jenkins build?
To debug a failed Jenkins build:
    Check console output for errors (Build > Console Output).
    Look for:
        Compilation/test errors.
        Missing tools or dependencies.
        Incorrect environment variables (like JAVA_HOME, PATH, etc.).
        Use set -x in shell scripts to trace commands.
        Run the same build manually on the server to reproduce the issue.
        Use Jenkins logs (/var/log/jenkins/jenkins.log) for deeper issues.